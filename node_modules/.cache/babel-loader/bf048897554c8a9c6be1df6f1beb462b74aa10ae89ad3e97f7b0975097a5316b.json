{"ast":null,"code":"var _jsxFileName = \"/home/nihal/work/react/mrlive/MRLIve/src/Components/PageLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Preloader from './Preloader'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageLoader = ({\n  children\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const location = useLocation(); // Get the current location\n\n  useEffect(() => {\n    setIsLoading(true); // Set loading to true whenever the location changes\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 500); // Adjust the delay as needed\n\n    return () => clearTimeout(timer);\n  }, [location.pathname]); // Trigger effect on location pathname change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 20\n    }, this) : children\n  }, void 0, false);\n};\n_s(PageLoader, \"YUtyc6HOlc4R1YmQbMQ03Gx5j1I=\", false, function () {\n  return [useLocation];\n});\n_c = PageLoader;\nexport default PageLoader;\nvar _c;\n$RefreshReg$(_c, \"PageLoader\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Preloader","jsxDEV","_jsxDEV","Fragment","_Fragment","PageLoader","children","_s","isLoading","setIsLoading","location","timer","setTimeout","clearTimeout","pathname","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nihal/work/react/mrlive/MRLIve/src/Components/PageLoader.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Preloader from './Preloader'; // Ensure this path is correct\n\nconst PageLoader = ({ children }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const location = useLocation(); // Get the current location\n\n  useEffect(() => {\n    setIsLoading(true); // Set loading to true whenever the location changes\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 500); // Adjust the delay as needed\n\n    return () => clearTimeout(timer);\n  }, [location.pathname]); // Trigger effect on location pathname change\n\n  return (\n    <>\n      {isLoading ? <Preloader /> : children}\n    </>\n  );\n};\n\nexport default PageLoader;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCD,SAAS,CAAC,MAAM;IACdW,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpB,MAAME,KAAK,GAAGC,UAAU,CAAC,MAAM;MAC7BH,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAMI,YAAY,CAACF,KAAK,CAAC;EAClC,CAAC,EAAE,CAACD,QAAQ,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzB,oBACEZ,OAAA,CAAAE,SAAA;IAAAE,QAAA,EACGE,SAAS,gBAAGN,OAAA,CAACF,SAAS;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GAAGZ;EAAQ,gBACrC,CAAC;AAEP,CAAC;AAACC,EAAA,CAlBIF,UAAU;EAAA,QAEGN,WAAW;AAAA;AAAAoB,EAAA,GAFxBd,UAAU;AAoBhB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}